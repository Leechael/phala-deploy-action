name: "Deploy and update a CVM on Phala Cloud"
author: "Leechael Yim"

outputs:
  cvm-id:
    description: 'The ID of the created CVM'
  app-id:
    description: 'The App ID of the created CVM'
  deployment-status:
    description: 'Status of the deployment (success/failed)'
  deployment-url:
    description: 'URL to access the deployed application'

inputs:
  phala-api-key:
    description: 'Phala Cloud API Key for authentication'
    required: true
  cvm-name:
    description: 'Name for the CVM to be created'
    required: false
    default: 'vrf-app'
  compose-file:
    description: 'Path to the docker-compose.yml file'
    required: false
    default: './docker-compose.yml'
  vcpu:
    description: 'Number of virtual CPUs for the CVM'
    required: false
    default: '2'
  memory:
    description: 'Memory size in MB for the CVM'
    required: false
    default: '2048'
  disk-size:
    description: 'Disk size in GB for the CVM'
    required: false
    default: '5'
  skip-env:
    description: 'Whether to skip environment variable prompts'
    required: false
    default: 'true'

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Deploy to Phala Cloud
      shell: bash
      run: |
        set -e
        cd $GITHUB_WORKSPACE
        bun install -g phala
        phala auth login "${{ inputs.phala-api-key }}"
        
        SKIP_ENV_FLAG=""
        if [[ "${{ inputs.skip-env }}" == "true" ]]; then
          SKIP_ENV_FLAG="--skip-env"
        fi
        
        # Run command and capture output
        output=$(phala cvms create --name ${{ inputs.cvm-name }} \
          --compose ${{ inputs.compose-file }} \
          --vcpu ${{ inputs.vcpu }} \
          --memory ${{ inputs.memory }} \
          --disk-size ${{ inputs.disk-size }} \
          $SKIP_ENV_FLAG)
        
        # Save output to a temporary file
        echo "$output" > /tmp/phala_output.txt
        
        # Extract CVM ID using grep and regex
        cvm_id=$(grep -oP "CVM ID │ \K[0-9]+" /tmp/phala_output.txt || echo "")
        echo "cvm-id=$cvm_id" >> $GITHUB_OUTPUT
        
        # Extract App ID using grep and regex
        app_id=$(grep -oP "App ID │ \Kapp_[a-f0-9]+" /tmp/phala_output.txt || echo "")
        echo "app-id=$app_id" >> $GITHUB_OUTPUT
        
        # Extract App URL using grep and regex
        app_url=$(grep -oP "App URL │ \K[^\│]+" /tmp/phala_output.txt || echo "")
        echo "deployment-url=$app_url" >> $GITHUB_OUTPUT
        
        # Set deployment status
        if [ -n "$cvm_id" ] && [ -n "$app_id" ]; then
          echo "deployment-status=success" >> $GITHUB_OUTPUT
        else
          echo "deployment-status=failed" >> $GITHUB_OUTPUT
        fi
