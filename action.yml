name: 'Phala Cloud CVM Deployment'
description: 'Deploy a Container Virtual Machine (CVM) to Phala Cloud'
author: 'Your GitHub Username'
branding:
  icon: 'cloud'
  color: 'blue'

outputs:
  cvm-id:
    description: 'The ID of the created or updated CVM'
  app-id:
    description: 'The App ID of the created or updated CVM'
  cvm-name:
    description: 'The name used for the CVM (useful when auto-generated from repo name)'
  deployment-status:
    description: 'Status of the deployment (success/failed)'
  deployment-url:
    description: 'URL to access the deployed application'
  operation:
    description: 'The operation performed (create/update)'

inputs:
  phala-api-key:
    description: 'Phala Cloud API Key for authentication'
    required: true
  cvm-name:
    description: 'Name for the CVM to be created'
    required: false
  compose-file:
    description: 'Path to the docker-compose.yml file'
    required: false
    default: './docker-compose.yml'
  vcpu:
    description: 'Number of virtual CPUs for the CVM'
    required: false
    default: '2'
  memory:
    description: 'Memory size in MB for the CVM'
    required: false
    default: '2048'
  disk-size:
    description: 'Disk size in GB for the CVM'
    required: false
    default: '40'
  envs:
    description: 'Environment variables in YAML format. Will be converted to dotenv format'
    required: false
    default: ''
  app-id:
    description: 'App ID of an existing CVM to update. If provided, will update the existing CVM instead of creating a new one'
    required: false
    default: ''
  node-id:
    description: 'Node ID (Teepod ID)'
    required: false
    default: ''
  base-image:
    description: 'Base image to use for the CVM'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install yq
      shell: bash
      run: |
        wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
        chmod +x /usr/local/bin/yq
        
    - name: Deploy to Phala Cloud
      shell: bash
      run: |
        set -e
        cd $GITHUB_WORKSPACE

        bun install -g phala@1.0.22

        export PHALA_CLOUD_API_KEY="${{ inputs.phala-api-key }}"

        phala status

        ENV_FLAG=""
        if [[ -n "${{ inputs.envs }}" ]]; then
          # Convert YAML to dotenv format
          echo "${{ inputs.envs }}" | yq -o=props --properties-separator="=" > .env
          # Debug output
          echo "=== Generated .env file ==="
          cat .env
          echo "==========================="

          ENV_FLAG="-e .env"
        fi
        
        # Determine the CVM name based on inputs or repo name
        CVM_NAME="${{ inputs.cvm-name }}"
        
        # If CVM name is empty, try to use the repo name instead
        if [[ -z "$CVM_NAME" ]]; then
          # Extract repo name from GITHUB_REPOSITORY (format: owner/repo)
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          
          # Sanitize repo name to ensure it meets requirements:
          # - Min 3 chars, max 20 chars
          # - Only a-zA-Z0-9_- characters
          CLEAN_REPO_NAME=$(echo $REPO_NAME | tr -cd 'a-zA-Z0-9_-')
          
          # Ensure it's at least 3 chars
          if [[ ${#CLEAN_REPO_NAME} -ge 3 ]]; then
            # Truncate to max 20 chars if needed
            if [[ ${#CLEAN_REPO_NAME} -gt 20 ]]; then
              CLEAN_REPO_NAME=${CLEAN_REPO_NAME:0:20}
            fi
            
            # Use the cleaned repo name
            CVM_NAME=$CLEAN_REPO_NAME
            echo "Using repository name as CVM name: $CVM_NAME"
          else
            # Default to my-dstack-app if repo name is invalid
            CVM_NAME="my-dstack-app"
            echo "Repository name too short or invalid, using default: $CVM_NAME"
          fi
        fi
        
        # Check if we should try to update an existing CVM
        if [[ -n "${{ inputs.app-id }}" ]]; then
          echo "App ID provided, will update existing CVM..."

          # Debug: show upgrade command with --debug flag
          echo "::group::Upgrade command"
          echo "phala cvms upgrade ${{ inputs.app-id }} --compose ${{ inputs.compose-file }} $ENV_FLAG --debug"
          echo "::endgroup::"

          # Update the CVM with --debug flag to get detailed error info
          set +e
          output=$(phala cvms upgrade ${{ inputs.app-id }} \
            --compose ${{ inputs.compose-file }} \
            $ENV_FLAG \
            --debug 2>&1)
          exit_code=$?
          set -e

          # Debug: show full output including any API response bodies
          echo "::group::Phala CLI output (exit code: $exit_code)"
          echo "$output"
          echo "::endgroup::"

          if [ $exit_code -ne 0 ]; then
            echo "::error::Phala CLI upgrade failed with exit code $exit_code"
            echo "========== FULL ERROR OUTPUT =========="
            echo "$output"
            echo "========================================"
            exit $exit_code
          fi

          # Output the CVM details
          echo "$output" > /tmp/phala_output.txt
          
          # Set outputs
          echo "cvm-id=${{ inputs.app-id }}" >> $GITHUB_OUTPUT
          echo "app-id=${{ inputs.app-id }}" >> $GITHUB_OUTPUT
          echo "cvm-name=$CVM_NAME" >> $GITHUB_OUTPUT
          
          # Extract App URL or construct it
          app_url=$(grep -oP "App URL │ \K[^\│]+" /tmp/phala_output.txt || echo "https://cloud.phala.network/dashboard/cvms/${{ inputs.app-id }}")
          echo "deployment-url=$app_url" >> $GITHUB_OUTPUT
          echo "deployment-status=success" >> $GITHUB_OUTPUT
          echo "operation=update" >> $GITHUB_OUTPUT
          
          exit 0
        fi
        
        # If we didn't update an existing CVM, create a new one
        echo "Creating new CVM with name: $CVM_NAME"
        output=$(phala cvms create --name $CVM_NAME \
          --compose ${{ inputs.compose-file }} \
          --vcpu ${{ inputs.vcpu }} \
          --memory ${{ inputs.memory }} \
          --disk-size ${{ inputs.disk-size }} \
          $ENV_FLAG)
        
        # Save output to a temporary file
        echo "$output" > /tmp/phala_output.txt
        
        # Extract CVM ID using grep and regex
        cvm_id=$(grep -oP "CVM ID     │ \K[0-9]+" /tmp/phala_output.txt || echo "")
        echo "cvm-id=$cvm_id" >> $GITHUB_OUTPUT
        
        # Get App ID from the last line of output
        app_id=$(tail -n 1 /tmp/phala_output.txt | grep -o "app_[a-zA-Z0-9]\+" || echo "")
        echo "app-id=$app_id" >> $GITHUB_OUTPUT
        echo "App ID: $app_id"
        
        # Save the CVM name we used
        echo "cvm-name=$CVM_NAME" >> $GITHUB_OUTPUT
        
        # Extract App URL using grep and regex
        app_url=$(grep -oP "App URL    │ \K[^│]+" /tmp/phala_output.txt | tr -d ' ' || echo "")
        echo "deployment-url=$app_url" >> $GITHUB_OUTPUT
        
        # Set deployment status
        if [ -n "$cvm_id" ] && [ -n "$app_id" ]; then
          echo "deployment-status=success" >> $GITHUB_OUTPUT
        else
          echo "deployment-status=failed" >> $GITHUB_OUTPUT
        fi
        
        echo "operation=create" >> $GITHUB_OUTPUT
